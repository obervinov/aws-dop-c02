AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CloudFormation template to create an AWS CodePipeline demonstrating Lambda function deployment and invocation.
  This pipeline consists of Source, Build, Deploy Lambda, and Invoke Lambda stages https://github.com/obervinov/aws-dop-c02/_labs/codepipeline-experiments/1.pipeline-lambda-invocation.yaml

Parameters:
  PipelineName:
    Type: String
    Description: Name of the CodePipeline.
    Default: LambdaInvocationPipelineExperiment

  SourceBucketName:
    Type: String
    Description: Name of the S3 bucket to use as a source for CodePipeline (e.g., for triggering).
                 If using CodeCommit, this bucket will still be used for CodePipeline artifacts.
    Default: codepipeline-experiments-lambda-invocation-{{AWS::AccountId}}

  LambdaFunctionName:
    Type: String
    Description: Name for the Lambda function to be deployed.
    Default: LambdaInvocationCodePipeline

Resources:
  # --- S3 Bucket for CodePipeline Artifacts ---
  PipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref SourceBucketName
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # --- IAM Roles ---
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - !GetAtt PipelineArtifactsBucket.Arn
                  - !Join ["/", [!GetAtt PipelineArtifactsBucket.Arn, "*"]]
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:StopBuild
                  - codebuild:BatchGetBuilds
                Resource: !GetAtt CodeBuildProject.Arn
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:DescribeStacks
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:SetStackPolicy
                  - cloudformation:ValidateTemplate
                Resource: !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/MyLambdaDeploymentStack/*
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt LambdaExecutionRole.Arn
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt LambdaFunction.Arn
              - Effect: Allow
                Action:
                  - lambda:GetFunctionConfiguration
                Resource: !GetAtt LambdaFunction.Arn

  # --- CodeBuild Service Role ---
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess
      Policies:
        - PolicyName: CodeBuildS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:GetBucketVersioning
                Resource:
                  - !GetAtt PipelineArtifactsBucket.Arn
                  - !Join ["/", [!GetAtt PipelineArtifactsBucket.Arn, "*"]]
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CodeBuildProject}
              - Effect: Allow
                Action:
                  - lambda:GetFunction
                  - lambda:UpdateFunctionConfiguration
                  - lambda:UpdateFunctionCode
                  - lambda:CreateFunction
                  - lambda:DeleteFunction
                  - lambda:PublishVersion
                  - lambda:GetAlias
                  - lambda:CreateAlias
                  - lambda:DeleteAlias
                  - lambda:UpdateAlias
                  - lambda:AddPermission
                  - lambda:RemovePermission
                Resource: !GetAtt LambdaFunction.Arn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaCloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionName}:*

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${PipelineName}-LambdaFunction"
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref PipelineArtifactsBucket
        S3Key: !Sub "${PipelineName}/lambda_function.zip"
      Runtime: nodejs20.x
      Timeout: 30
      MemorySize: 128

  # --- CodeBuild Project ---
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${PipelineName}-LambdaPackager"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
        Name: BuildArtifact
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/nodejs:18.12.0
        Type: LINUX_CONTAINER
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: 18
            build:
              commands:
                - echo "Writing Lambda function code..."
                - |
                  cat << EOF > index.js
                  exports.handler = async (event) => {
                      console.log('Lambda invoked by CodePipeline with event:', JSON.stringify(event, null, 2));
                      const response = {
                          statusCode: 200,
                          body: JSON.stringify('Hello from Lambda deployed by CodePipeline! Event received: ' + JSON.stringify(event)),
                      };
                      return response;
                  };
                  EOF
                - echo "Zipping Lambda function code..."
                - zip -r lambda_function.zip index.js
                - echo "Creating CloudFormation template for Lambda deployment..."
                - |
                  cat << EOF > lambda-template.yaml
                  AWSTemplateFormatVersion: '2010-09-09'
                  Description: CloudFormation template to deploy a Lambda function.

                  Parameters:
                    LambdaS3Bucket:
                      Type: String
                      Description: S3 Bucket containing the Lambda function zip file.
                    LambdaS3Key:
                      Type: String
                      Description: S3 Key for the Lambda function zip file.
                    LambdaFunctionName:
                      Type: String
                      Description: Name for the Lambda function.
                    LambdaExecutionRoleArn:
                      Type: String
                      Description: ARN of the IAM role for the Lambda function.

                  Resources:
                    MyDemoLambda:
                      Type: AWS::Lambda::Function
                      Properties:
                        FunctionName: !Ref LambdaFunctionName
                        Handler: index.handler
                        Role: !Ref LambdaExecutionRoleArn
                        Code:
                          S3Bucket: !Ref LambdaS3Bucket
                          S3Key: !Ref LambdaS3Key
                        Runtime: nodejs18.x
                        Timeout: 30
                        MemorySize: 128

                  Outputs:
                    LambdaFunctionArn:
                      Description: The ARN of the deployed Lambda function.
                      Value: !GetAtt MyDemoLambda.Arn
                  EOF
          artifacts:
            files:
              - lambda_function.zip
              - lambda-template.yaml
            discard-paths: no

  # --- CodePipeline ---
  # Сам пайплайн
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref PipelineName
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifactsBucket
      Stages:
        # 1. Source Stage - Получение исходного кода (для примера это S3, где вы вручную загрузите файл)
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: "1"
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                S3Bucket: !Ref PipelineArtifactsBucket # Используем тот же бакет, но нужно будет загрузить в него файл
                S3ObjectKey: source.zip # Имя файла, который вы должны будете загрузить в бакет
              RunOrder: 1
        # 2. Build Stage - Сборка Lambda-функции и шаблона CloudFormation для её развертывания
        - Name: Build
          Actions:
            - Name: BuildLambdaPackage
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              InputArtifacts:
                - Name: SourceArtifact # Входной артефакт из стадии Source
              OutputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 1
        # 3. Deploy Lambda Stage - Развертывание Lambda-функции с помощью CloudFormation
        - Name: DeployLambda
          Actions:
            - Name: DeployFunction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              InputArtifacts:
                - Name: BuildArtifact # Входной артефакт из стадии Build
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: MyLambdaDeploymentStack # Имя стека CloudFormation для развертывания Lambda
                TemplatePath: BuildArtifact::lambda-template.yaml # Путь к шаблону в артефакте
                ParameterOverrides: !Sub |
                  {
                    "LambdaS3Bucket": "${PipelineArtifactsBucket}",
                    "LambdaS3Key": "BuildArtifact/lambda_function.zip", # Путь к ZIP-файлу в артефакте сборки
                    "LambdaFunctionName": "${LambdaFunctionName}",
                    "LambdaExecutionRoleArn": "${LambdaExecutionRole.Arn}"
                  }
                RoleArn: !GetAtt CodePipelineServiceRole.Arn # CodePipeline использует свою роль для развертывания
                Capabilities: CAPABILITY_IAM # Для создания роли Lambda
              RunOrder: 1
        # 4. Invoke Lambda Stage - Вызов развернутой Lambda-функции
        - Name: InvokeLambda
          Actions:
            - Name: InvokeMyFunction
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: "1"
              Configuration:
                FunctionName: !Ref LambdaFunctionName # Имя Lambda-функции, которую нужно вызвать
                InvocationType: RequestResponse # Или Event для асинхронного вызова
                UserParameters: | # Входные данные для Lambda-функции (JSON)
                  {
                    "source": "CodePipeline",
                    "stage": "InvokeLambda",
                    "message": "Hello from your pipeline!"
                  }
              RunOrder: 1

Outputs:
  CodePipelineUrl:
    Description: URL to the created CodePipeline.
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/codesuite/codepipeline/pipelines/${PipelineName}/view"
  LambdaFunctionName:
    Description: Name of the deployed Lambda function.
    Value: !Ref LambdaFunctionName
  PipelineArtifactsBucketName:
    Description: Name of the S3 bucket used for CodePipeline artifacts.
    Value: !Ref PipelineArtifactsBucket
